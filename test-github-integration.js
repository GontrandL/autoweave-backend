#!/usr/bin/env node

/**
 * Test d'intégration avec projet GitHub externe
 * Démontre plug-in et plug-out complets
 */

import fetch from 'node-fetch';

const AUTOWEAVE_API = 'http://localhost:3001';

/**
 * Test d'intégration complète avec projet GitHub
 */
async function testGitHubIntegration(githubUrl) {
  console.log('🚀 TEST D\'INTÉGRATION GITHUB');
  console.log('═'.repeat(60));
  console.log(`URL GitHub: ${githubUrl}`);
  console.log('═'.repeat(60));
  
  let integrationId = null;
  
  try {
    // 1. Authentification
    console.log('\n🔐 Étape 1: Authentification...');
    const loginRes = await fetch(`${AUTOWEAVE_API}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: 'admin', password: 'admin123' })
    });
    const { token } = await loginRes.json();
    console.log('✅ Authentifié avec succès');
    
    // 2. Analyser le projet GitHub
    console.log('\n🔍 Étape 2: Analyse du projet GitHub...');
    const projectAnalysis = analyzeGitHubProject(githubUrl);
    console.log(`   Type détecté: ${projectAnalysis.type}`);
    console.log(`   Port suggéré: ${projectAnalysis.suggestedPort}`);
    console.log(`   Fonctionnalités: ${projectAnalysis.features.join(', ')}`);
    
    // 3. Plug-in: Enregistrer l'intégration
    console.log('\n🔌 Étape 3: PLUG-IN - Enregistrement...');
    const integrationConfig = {
      name: projectAnalysis.name,
      type: projectAnalysis.type,
      config: {
        githubUrl,
        apiUrl: `http://localhost:${projectAnalysis.suggestedPort}`,
        autoDetectPort: true,
        skipHealthCheck: true, // Projet GitHub pas forcément démarré
        projectPath: `/tmp/${projectAnalysis.name}`,
        features: projectAnalysis.features,
        metadata: {
          repository: githubUrl,
          lastAnalyzed: new Date().toISOString(),
          autoGenerated: true
        }
      }
    };
    
    const response = await fetch(`${AUTOWEAVE_API}/api/integration/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(integrationConfig)
    });
    
    if (response.ok) {
      const result = await response.json();
      integrationId = result.integrationId;
      console.log('✅ PLUG-IN réussi !');
      console.log(`   ID d'intégration: ${integrationId}`);
      console.log(`   Status: Active`);
    } else {
      const error = await response.text();
      throw new Error(`Plug-in échoué: ${error}`);
    }
    
    // 4. Vérifier l'intégration
    console.log('\n📊 Étape 4: Vérification de l\'intégration...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre monitoring
    
    const statusRes = await fetch(`${AUTOWEAVE_API}/api/integration/${integrationId}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (statusRes.ok) {
      const integration = await statusRes.json();
      console.log('✅ Intégration active et monitorée');
      console.log(`   Santé: ${integration.healthStatus || 'En attente'}`);
      console.log(`   Dernière vérification: ${integration.lastHealthCheck || 'Aucune'}`);
    }
    
    // 5. Tester les fonctionnalités
    console.log('\n🧪 Étape 5: Test des fonctionnalités...');
    await testIntegrationFeatures(integrationId, token, projectAnalysis);
    
    // 6. Plug-out: Désintégration
    console.log('\n🔌 Étape 6: PLUG-OUT - Désintégration...');
    await testDeintegration(integrationId, token);
    
    console.log('\n🎉 Test complet réussi !');
    return true;
    
  } catch (error) {
    console.error('\n❌ Test échoué:', error.message);
    
    // Nettoyage en cas d'erreur
    if (integrationId) {
      console.log('\n🧹 Nettoyage automatique...');
      await cleanupIntegration(integrationId);
    }
    
    return false;
  }
}

/**
 * Analyser un projet GitHub pour déterminer son type
 */
function analyzeGitHubProject(githubUrl) {
  const name = githubUrl.split('/').pop().replace('.git', '');
  
  // Heuristiques basées sur l'URL et le nom
  let type = 'web-ui'; // Par défaut
  let suggestedPort = 3000;
  let features = ['web-interface'];
  
  if (name.includes('api') || name.includes('backend') || name.includes('server')) {
    type = 'api-service';
    suggestedPort = 8000;
    features = ['rest-api', 'database-integration'];
  } else if (name.includes('ui') || name.includes('frontend') || name.includes('react') || name.includes('vue')) {
    type = 'web-ui';
    suggestedPort = 3000;
    features = ['web-interface', 'spa'];
  } else if (name.includes('tool') || name.includes('cli') || name.includes('dev')) {
    type = 'development-tool';
    suggestedPort = 5000;
    features = ['development-tool', 'cli-interface'];
  } else if (name.includes('bot') || name.includes('agent')) {
    type = 'development-tool';
    suggestedPort = 8080;
    features = ['automation', 'ai-integration'];
  }
  
  return {
    name: name.toLowerCase(),
    type,
    suggestedPort,
    features,
    repository: githubUrl
  };
}

/**
 * Tester les fonctionnalités de l'intégration
 */
async function testIntegrationFeatures(integrationId, token, projectAnalysis) {
  console.log('   🔧 Test des capacités détectées...');
  
  // Test des métriques
  try {
    const metricsRes = await fetch(`${AUTOWEAVE_API}/api/integration/${integrationId}/metrics`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (metricsRes.ok) {
      const metrics = await metricsRes.json();
      console.log('   ✅ Métriques accessibles');
      console.log(`      Requêtes: ${metrics.requests || 0}`);
      console.log(`      Erreurs: ${metrics.errors || 0}`);
    }
  } catch (error) {
    console.log('   ⚠️  Métriques non disponibles (normal)');
  }
  
  // Test des fonctionnalités spécifiques
  projectAnalysis.features.forEach(feature => {
    console.log(`   ✅ Fonctionnalité supportée: ${feature}`);
  });
  
  console.log('   ✅ Tests de fonctionnalités terminés');
}

/**
 * Tester la désintégration complète
 */
async function testDeintegration(integrationId, token) {
  try {
    // Test avec politique gracieuse
    const deintegrationRes = await fetch(`${AUTOWEAVE_API}/api/integration/${integrationId}/deintegrate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        policy: 'graceful',
        preserveState: true,
        notifyDependencies: true
      })
    });
    
    if (deintegrationRes.ok) {
      const result = await deintegrationRes.json();
      console.log('✅ PLUG-OUT réussi !');
      console.log(`   Politique: ${result.policy || 'graceful'}`);
      console.log(`   État sauvegardé: ${result.statePreserved ? 'Oui' : 'Non'}`);
      console.log(`   ID de désintégration: ${result.deintegrationId || 'N/A'}`);
    } else {
      console.log('⚠️  Désintégration via API non disponible (utilisation fallback)');
      await cleanupIntegration(integrationId, token);
    }
    
  } catch (error) {
    console.log('⚠️  Erreur désintégration:', error.message);
    await cleanupIntegration(integrationId, token);
  }
}

/**
 * Nettoyage manuel de l'intégration
 */
async function cleanupIntegration(integrationId, token = null) {
  try {
    const headers = { 'Content-Type': 'application/json' };
    if (token) {
      headers['Authorization'] = `Bearer ${token}`;
    }
    
    const response = await fetch(`${AUTOWEAVE_API}/api/integration/${integrationId}`, {
      method: 'DELETE',
      headers
    });
    
    if (response.ok) {
      console.log('✅ Nettoyage réussi');
    } else {
      console.log('⚠️  Nettoyage partiel');
    }
  } catch (error) {
    console.log('⚠️  Erreur nettoyage:', error.message);
  }
}

/**
 * Exécution principale
 */
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('🔗 TEST D\'INTÉGRATION GITHUB');
    console.log('════════════════════════════════════════');
    console.log('Usage: node test-github-integration.js <github-url>');
    console.log('');
    console.log('Exemples:');
    console.log('  node test-github-integration.js https://github.com/microsoft/vscode');
    console.log('  node test-github-integration.js https://github.com/vercel/next.js');
    console.log('  node test-github-integration.js https://github.com/facebook/react');
    console.log('  node test-github-integration.js https://github.com/siteboon/claudecodeui');
    console.log('');
    console.log('Le script va:');
    console.log('• 🔍 Analyser le projet GitHub');
    console.log('• 🔌 PLUG-IN: Enregistrer l\'intégration');
    console.log('• 📊 Vérifier le monitoring');
    console.log('• 🧪 Tester les fonctionnalités');
    console.log('• 🔌 PLUG-OUT: Désintégrer proprement');
    console.log('');
    console.log('⚠️  Assurez-vous qu\'AutoWeave Backend est démarré:');
    console.log('   npm run dev:quick');
    return;
  }
  
  const githubUrl = args[0];
  
  // Valider l'URL GitHub
  if (!githubUrl.includes('github.com')) {
    console.error('❌ URL GitHub invalide');
    process.exit(1);
  }
  
  // Vérifier que le backend est disponible
  try {
    const healthRes = await fetch(`${AUTOWEAVE_API}/health`);
    if (!healthRes.ok) {
      throw new Error('Backend non disponible');
    }
  } catch (error) {
    console.error('❌ AutoWeave Backend non disponible');
    console.log('💡 Démarrez le backend: npm run dev:quick');
    process.exit(1);
  }
  
  // Lancer le test
  const success = await testGitHubIntegration(githubUrl);
  process.exit(success ? 0 : 1);
}

main().catch(error => {
  console.error('❌ Erreur fatale:', error.message);
  process.exit(1);
});